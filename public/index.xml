<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>morgan docs</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on morgan docs</description>
    <generator>Hugo -- 0.132.0</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Nov 2024 13:53:00 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating animations of soil cores out of CT scans</title>
      <link>http://localhost:1313/posts/creating-animations-of-soil-cores/</link>
      <pubDate>Wed, 20 Nov 2024 13:53:00 -0600</pubDate>
      <guid>http://localhost:1313/posts/creating-animations-of-soil-cores/</guid>
      <description>Introduction Goal: To create animations of soil cores spinning from .vol files obtained from the Pacific Northwest National Laboratory.
We&amp;rsquo;re getting our files from the Environmental Molecular Sciences Laboratory at the Pacific Northwest National Laboratory, who have scanned the soil cores with a Nikon XTH CT scanner.
Requirements .vol files from a CT scanner At least 16gb of memory Ideally more. Both Fiji and Dragonfly attempt to load the entire file into memory; the downloaded .</description>
    </item>
    <item>
      <title>Analyzing soil with a XRF</title>
      <link>http://localhost:1313/posts/analyzing-soil-with-xrf/</link>
      <pubDate>Mon, 21 Oct 2024 08:56:00 -0500</pubDate>
      <guid>http://localhost:1313/posts/analyzing-soil-with-xrf/</guid>
      <description>Note: This article is a draft and will be modified.
Warning: The XRF emits X-rays up to 50kV. Improper use can and will cause serious, long term harm to your health. Follow all safety protocols including those beyond this article.
Introduction This article assumes you already are in possession of pucks of finely ground soil.
Procedure Prepare the XRF Analyzer
Take the battery from the charger and insert it into the back of the XRF.</description>
    </item>
    <item>
      <title>Git basics</title>
      <link>http://localhost:1313/posts/git-basics/</link>
      <pubDate>Wed, 21 Aug 2024 11:00:00 -0500</pubDate>
      <guid>http://localhost:1313/posts/git-basics/</guid>
      <description>Introduction to Git and GitHub It&amp;rsquo;s easiest to think of Git (and other forms of source control) like a time machine.
When you make changes to your project, it&amp;rsquo;s easy to see what has changed. You have a perfect history of everything that&amp;rsquo;s ever happened in your project, and can always revert to any point in that history. Git allows you to work with other people on the same project, while guaranteeing that you won&amp;rsquo;t mess up each other&amp;rsquo;s work.</description>
    </item>
    <item>
      <title>Creating a .kml file from a Google Earth project</title>
      <link>http://localhost:1313/posts/creating-a-kml-from-a-project/</link>
      <pubDate>Thu, 15 Aug 2024 12:39:00 -0500</pubDate>
      <guid>http://localhost:1313/posts/creating-a-kml-from-a-project/</guid>
      <description>Introduction &amp;ldquo;Keyhole Markup Language&amp;rdquo;
.kml files are useful for a number of reasons, namely storing pins, locations, polygons, images, and other GIS info. One of the easiest ways to make them is with Google Earth.
You can approach this in a couple of ways. Both the Earth website and the Google Earth Pro desktop app are usable.
Google Earth Web Open Google Earth in a browser. Open the left hand side bar.</description>
    </item>
    <item>
      <title>Mapping DI and EP with rgee</title>
      <link>http://localhost:1313/posts/mapping-di-and-ep-with-rgee/</link>
      <pubDate>Thu, 15 Aug 2024 12:39:00 -0500</pubDate>
      <guid>http://localhost:1313/posts/mapping-di-and-ep-with-rgee/</guid>
      <description>Note: I have a sneaking suspicion that trying this in Earth Engine proper using JS will significantly improve the results. The same goal attempted in rgee will remain available below, and a hopefully better JS version will appear above this in the coming days.
Rgee version Introduction Goal: create global maps showing Dryness Index and Evaporative Index in both 2012 and 2019, using rgee.
This was pretty tricky to get working.</description>
    </item>
    <item>
      <title>Exporting data to a CSV with rgee</title>
      <link>http://localhost:1313/posts/exporting-data-to-a-csv-with-rgee/</link>
      <pubDate>Tue, 13 Aug 2024 11:37:00 -0500</pubDate>
      <guid>http://localhost:1313/posts/exporting-data-to-a-csv-with-rgee/</guid>
      <description>Introduction In general, exporting data to a .csv with rgee is pretty easy. The general gist of the process is:
Define the area or points you are interested in Filter data Convert the results to a list, and Export to a csv. Example Make sure to load and initialize rgee first!
# Define an AOI over Kansas aoi &amp;lt;- ee$Geometry$Rectangle(c(-102.05, 36.99, -94.6, 40.0)) # Define sample points in the area points &amp;lt;- ee$FeatureCollection(c( ee$Feature(ee$Geometry$Point(-98.</description>
    </item>
    <item>
      <title>Getting data from AppEEARS and NOAA</title>
      <link>http://localhost:1313/posts/getting-data-from-appeears-and-noaa/</link>
      <pubDate>Tue, 13 Aug 2024 11:37:00 -0500</pubDate>
      <guid>http://localhost:1313/posts/getting-data-from-appeears-and-noaa/</guid>
      <description>Data types (link to method of gathering) MAT (Mean Annual Temperature) Average yearly temperature. MAP (Mean Annual Precipitation) Average yearly precipitation. GPP (Gross Primary Productivity) Total amount of energy captured by plants. Does not account for respiration losses. NPP (Net Primary Productivity) Amount of energy that remains after plants have used some of the captured energy for their own respiration. Actual amount of new biomass that is available for consumption by other critters.</description>
    </item>
    <item>
      <title>Making maps of variables with rgee</title>
      <link>http://localhost:1313/posts/making-maps-of-variables-with-rgee/</link>
      <pubDate>Tue, 13 Aug 2024 11:37:00 -0500</pubDate>
      <guid>http://localhost:1313/posts/making-maps-of-variables-with-rgee/</guid>
      <description>Introduction Raw data often needs to be transformed in order to do anything useful with it. Typically, transforming variables in GEE involves manipulating raw bands of imagery to create products like NDVI and EVI, or performing math operations with multiple datasets.
Dividing EVI by Precipitation In this example, EVI is being divided by precipitation data for Kansas, and the result is mapped.
Load and initialize rgee first!
library(rgee) ee_Initialize() # Define an area of interest (AOI) over Kansas aoi &amp;lt;- ee$Geometry$Rectangle(c(-102.</description>
    </item>
    <item>
      <title>Setting up rgee</title>
      <link>http://localhost:1313/posts/setting-up-rgee/</link>
      <pubDate>Tue, 13 Aug 2024 11:37:00 -0500</pubDate>
      <guid>http://localhost:1313/posts/setting-up-rgee/</guid>
      <description>Introduction From the rgee github page: &amp;ldquo;rgee is an R binding package for calling Google Earth Engine API from within R. Various functions are implemented to simplify the connection with the R spatial ecosystem.&amp;rdquo;
This guide assumes use of RStudio on a Mac, but I personally use Emacs with ESS and found it to work wonderfully. Any Unix based system should work similarly. Windows should theoretically work by following the below, but more work might be required and I haven&amp;rsquo;t tested it.</description>
    </item>
    <item>
      <title>Using variables in rgee</title>
      <link>http://localhost:1313/posts/using-variables-in-rgee/</link>
      <pubDate>Tue, 13 Aug 2024 11:37:00 -0500</pubDate>
      <guid>http://localhost:1313/posts/using-variables-in-rgee/</guid>
      <description>Introduction Google Earth Engine provides access to a bunch of geospatial datasets including satellite imagery, climate data and land cover classifications. These datasets, known as variables, are used to perform geospatial analyses.
Calling variables Load and initialize rgee first!
Define an area that you want to visualize. The easiest way of doing this is to define a rectangle with coordinates.
aoi &amp;lt;- ee$Geometry$Rectangle(c(-120.4, 34.5, -119.4, 35.5)) In this example, I&amp;rsquo;ll use the MODIS land cover datasets.</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/posts/creating-this-website/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/creating-this-website/</guid>
      <description>Writing and formatting All posts are written in Emacs 29.4 in Org mode.
Publishing Posts are published to markdown using ox-hugo, and pushed to GitHub using Magit. Hugo is used as a framework for the website, with a modified version of the papermod theme. I use Cloudflare for the majority of domain work. Cloudflare pages is used for building the site.
Written in Emacs 29.4, using Doom 2.0.9, in Org mode 9.</description>
    </item>
  </channel>
</rss>
